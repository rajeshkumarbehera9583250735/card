*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    /*If you set box-sizing: border-box; on an element, padding and border are included in the width and height*/
    background-position-x: right;
    background-position-y: 100px;
    background-repeat: no-repeat; 
  }
header{
    width: 100%;
    height: 100vh;
  }
nav{
    width:100%;
    height: 7vh;
    background: black;
    color: white;
    display: flex;
    font-size: x-large;
    position:fixed;
    /* 
    The display property specifies the display behavior (the type of rendering box) of an element.
    
    flex : Displays an element as a block-level flex container 
    
    The justify-content property aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally).
    example:
    center	      :Items are positioned in the center of the container	
    space-between :Items will have space between them	
    space-around  :Items will have space before, between, and after them	
    space-evenly  :Items will have equal space around them

    Use the align-items property to align the items vertically.*/
    justify-content: space-between;
    align-items:center;
    text-transform: uppercase;
    
  }
  .logo{
    width: 20%;
    text-align: center;
    word-spacing: 5px;

  }
  .menudetails{
    width:50%;
    /* background: red; */
    display: flex;
    justify-content: space-around;
    font-family: 'Oswald', sans-serif;
    /* font-family it is a csss3 features */
    
  }
  .menudetails a{
    width: 20%;
    text-decoration: none;
    color: white;
  }

  main{
   width: 100%;
   height: 1100px;
   background-color: rgb(183, 222, 125);
   color: rgb(25, 25, 100);
   text-transform: uppercase;
   justify-content: space-between;
   

  }
  .maindiv{
    display: flex;
    flex-direction: row;
    text-align: center;
  }
 .div1{
  width: 40%;
  height: 700px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  
  /* background-color:rgb(138, 60, 52) ; */
 }
 .div1 h1{
  padding: 55px;
  font-size: 40px;
  font-weight: bold;
  letter-spacing: 1px;
  word-spacing: 435px;

 }
 .h1class1{
  color:black;
  font-size: 50px;
  text-shadow: 1px 3px rgb(239, 81, 105);
  /*text-shadow: is a css3 version   */
 }
 .h2class1{
  color:rgb(0, 4, 255);
 
 }

 section p{
  /* google font used */
  font-family: 'Anton', sans-serif; 
  font-family: 'DM Serif Display', serif;
  font-family: 'Oswald', sans-serif;
  font-size:25px ;
 }
 .pclass1{
   margin-top: 10px;
   margin-bottom: 5px;
  }
 .pclass2{
   margin-bottom: 50px;
  }
 .pclass3{
    margin-bottom: 100px;
    word-spacing: 1px;
    letter-spacing: 1px;
    font-family: 'Anton', sans-serif;
    font-family: 'DM Serif Display', serif;
    font-family: 'IBM Plex Serif', serif;
    font-family: 'Oswald', sans-serif;
    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
  }

  section a{
    padding: 12px 15px;
    border-radius: 5px;
    font-size: 20px;
    font-weight: bold;
    text-decoration: none;
    /*transition: is a css3 property
    ease is a transition-timing-function property
    */
    transition: all .5s ease;
    
  }
  section .button1{
    background: rgb(0, 0, 0);
    color: orangered;
  }
  section .button2{
    background: orangered;
    color:rgb(0, 0, 0) ;

  }

  .button1:hover{
    /* hover is css1 version */
    background:rgb(231, 51, 51);
    color:rgb(27, 27, 93) ;
  }
  .button2:hover{
    background:rgb(27, 27, 93);
    color:red ;
  }


 .div2{
  display: flex;
  /*flex-direction: is CSS3 version */
  flex-direction: column;
  /* background-color: aquamarine; */
  width: 60%;
  height: 700px;
  letter-spacing: -1px;
  word-spacing: 4px;
  background-position-x: center;
}
 
.div2_2{
  margin-top: 40px;
}
span{
  word-spacing: 2px;
  color:orangered;
}
.change_content::after{
  /* The ::after selector inserts something after the content of each selected element(s). */
  content: ''; 
  /* The content property is used with the ::before and ::after pseudo-elements, to insert generated content.
  
  What is pseudo-element?

  A CSS pseudo-element is used to style specified parts of an element.
  For example, it can be used to:

  Style the first letter, or line, of an element
  Insert content before, or after, the content of an element */

  animation: changetext 10s infinite linear;
  text-shadow: 1px 3px rgb(5, 5, 5);
 }

 /* here our website binds the "changetext" animation to the <span> element. 
 The animation will continue for infinite time and it will gradually change the text of the <span> element from "net" to "ui fullstack": */
 @keyframes changetext{
  0%{content:"net";}
  14%{content:"gate";}
  28%{content:"data structure";}
  42%{content:"c language";}
  56%{content:"java";}
  70%{content:"python";}
  84%{content:"sql";}
  100%{content:"ui fullstack";}

 }

 

